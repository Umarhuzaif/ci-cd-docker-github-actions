name: CI/CD

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  build-test-push:
    name: Build, Test, Push
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/flask-ci-cd
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (Optional) language setup + tests â€” adapt to your stack
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run tests
        run: |
          if [ -d tests ]; then pytest -q; else echo "No tests folder, skipping"; fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set tag
        id: tag
        run: |
          # Push "latest" on main; else use short SHA for dev/PRs
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}

  deploy:
    name: Deploy to VM
    needs: build-test-push
    # Target your VM's runner. If you gave it the "prod" label, use labels:
    runs-on: [self-hosted, linux, x64, prod]
    if: startsWith(github.ref, 'refs/heads/main')  # only deploy from main
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      TAG: latest
    steps:
      - name: Run deployment script on VM
        run: |
          ~/deploy.sh